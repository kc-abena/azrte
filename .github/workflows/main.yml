name: Azure OIDC Token Exchange

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  get-azure-tokens:
    runs-on: ubuntu-latest

    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get GitHub OIDC Token via GitHub Script
        id: oidc
        uses: actions/github-script@v7
        with:
          script: |
            const requestUrl = `${process.env.ACTIONS_ID_TOKEN_REQUEST_URL}&audience=api://AzureADTokenExchange`;
            const token = process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN;

            const res = await fetch(requestUrl, {
              headers: {
                Authorization: `bearer ${token}`
              }
            });

            if (!res.ok) {
              throw new Error(`OIDC token request failed: ${res.status} ${res.statusText}`);
            }

            const data = await res.json();
            core.setSecret(data.value);
            core.setOutput("oidc_token", data.value);

      - name: Exchange OIDC for ARM and Graph Tokens
        id: exchange
        run: |
          TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
          CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
          OIDC_TOKEN="${{ steps.oidc.outputs.oidc_token }}"

          # Function to request a token for a given scope
          request_token () {
            local SCOPE="$1"
            curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
              -d "client_id=$CLIENT_ID" \
              -d "grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer" \
              -d "assertion=$OIDC_TOKEN" \
              -d "scope=$SCOPE" \
              -d "requested_token_use=on_behalf_of" \
              "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token"
          }

          echo "üîÅ Requesting ARM token..."
          ARM_RESPONSE=$(request_token "https://management.azure.com/.default")
          ARM_TOKEN=$(echo "$ARM_RESPONSE" | jq -r '.access_token')

          if [ "$ARM_TOKEN" = "null" ] || [ -z "$ARM_TOKEN" ]; then
            echo "‚ùå Failed to get ARM token"
            echo "$ARM_RESPONSE"
            exit 1
          fi

          echo "::add-mask::$ARM_TOKEN"
          echo "arm_token=$ARM_TOKEN" >> "$GITHUB_OUTPUT"

          echo "üîÅ Requesting Graph token..."
          GRAPH_RESPONSE=$(request_token "https://graph.microsoft.com/.default")
          GRAPH_TOKEN=$(echo "$GRAPH_RESPONSE" | jq -r '.access_token')

          if [ "$GRAPH_TOKEN" = "null" ] || [ -z "$GRAPH_TOKEN" ]; then
            echo "‚ùå Failed to get Graph token"
            echo "$GRAPH_RESPONSE"
            exit 1
          fi

          echo "::add-mask::$GRAPH_TOKEN"
          echo "graph_token=$GRAPH_TOKEN" >> "$GITHUB_OUTPUT"

      - name: Call ARM API - List Resource Groups
        run: |
          echo "üåê Calling ARM API"
          curl -s -X GET "https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourcegroups?api-version=2021-04-01" \
            -H "Authorization: Bearer ${{ steps.exchange.outputs.arm_token }}" \
            -H "Content-Type: application/json" | jq

      - name: Call Microsoft Graph API - List Applications
        run: |
          echo "üåê Calling Microsoft Graph API"
          curl -s -X GET "https://graph.microsoft.com/v1.0/applications?\$top=5" \
            -H "Authorization: Bearer ${{ steps.exchange.outputs.graph_token }}" \
            -H "Content-Type: application/json" | jq
